#include <iostream>
#include <random>
#include <string>
#include <mpi.h>
#include <omp.h>
#include <stdio.h>
#include <time.h>
#include <stdlib.h>
#include <sstream>
#define PROCNUM 8

using namespace std;

int main(int argc, char **argv)
{
    string size;
    stringstream ss;

    ss << argv[1];
    ss >> size;

    // cout << "LOL OK " <<  << endl;
    // const int len = stoi(size);
    const int len = 104;

    int rank, n, i, message;
    int n1 = len / PROCNUM;

    int a[len], b[len], c[len];
    int a1[len], b1[len], c1[len];

    int sum = 0;
    // int startInd = -1;
    // int distributedSum[PROCNUM];

    // for (i = 0; i < len; i++)
    // {
    //     distributedSum[i] = 0;
    // }
    // int step, startIndex, endIndex;
    // int z;
    MPI_Status status;
    MPI_Init(&argc, &argv);
    MPI_Comm_size(MPI_COMM_WORLD, &n);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);

    if (rank == 0)
    {
        cout << "Filling array with [" << len << "] size in 0 proccess" << endl;
        // int *a = new int[len];
        // int *b = new int[len];
        for (int i = 0; i < len; i++)
        {
            a[i] = 1;
            b[i] = 1;
            // c[i] = 0;

            // a1[i] = 0;
            // b1[i] = 0;
            // c1[i] = 0;
        }

        cout << "Check initializing:" << endl;
        for (int i = 0; i < len; i++)
        {
            cout << "a[" << i << "](" << a[i] << ") \t b[" << i << "] (" << b[i] << ") \t" << "c[" << i << "] (" << c[i] << ")" << endl << endl;
        }
    }

    MPI_Scatter(&a[0], n1, MPI_INT, &a1[0], n1, MPI_INT, 0, MPI_COMM_WORLD);
    MPI_Scatter(&b[0], n1, MPI_INT, &b1[0], n1, MPI_INT, 0, MPI_COMM_WORLD);

    for (int i = 0; i <= n1; i++)
    {
        c1[i] = a1[i] * b1[i];
    }

    // MPI_Barrier(MPI_COMM_WORLD);

    MPI_Gather(&c1[0], n1, MPI_INT, &c[0], n1, MPI_INT, 0, MPI_COMM_WORLD);

    if (rank == 0)
    {
        cout << "Result:" << endl;
        for (int i = 0; i < len; i++)
        {
            cout << "a[" << i << "](" << a[i] << ") + b[" << i << "] (" << b[i] << ") ==>" << " c[" << i << "] (" << c[i] << ")" << endl << endl;
            sum += c[i];
        }

        cout << "SUM = " << sum << endl;
    }

    MPI_Finalize();

    // char e;
    // cin >> e;

    return 0;
}

/*
Assignment:

Run:
mpic++ A7.cpp -o A7.exe 

Output:
PS D:\Unic-ITMO\ParallelAlgs\_assigments> mpiexec ./A7 1000 -n 7
Allocating array with [104] size in 0 proccess
Check initializing:
a[0](1)          b[0] (1)       c[0] (-1855706240)

a[1](1)          b[1] (1)       c[1] (433)

a[2](1)          b[2] (1)       c[2] (322)

a[3](1)          b[3] (1)       c[3] (0)

a[4](1)          b[4] (1)       c[4] (322)

a[5](1)          b[5] (1)       c[5] (433)

a[6](1)          b[6] (1)       c[6] (-1157627462)

a[7](1)          b[7] (1)       c[7] (0)

a[8](1)          b[8] (1)       c[8] (-1855706240)

a[9](1)          b[9] (1)       c[9] (433)

a[10](1)         b[10] (1)      c[10] (-1721670511)

a[11](1)         b[11] (1)      c[11] (32767)

a[12](1)         b[12] (1)      c[12] (-1854341120)

a[13](1)         b[13] (1)      c[13] (433)

a[14](1)         b[14] (1)      c[14] (0)

a[15](1)         b[15] (1)      c[15] (0)

a[16](1)         b[16] (1)      c[16] (-1855706288)

a[17](1)         b[17] (1)      c[17] (433)

a[18](1)         b[18] (1)      c[18] (324)

a[19](1)         b[19] (1)      c[19] (0)

a[20](1)         b[20] (1)      c[20] (324)

a[21](1)         b[21] (1)      c[21] (433)

a[22](1)         b[22] (1)      c[22] (324)

a[23](1)         b[23] (1)      c[23] (0)

a[24](1)         b[24] (1)      c[24] (-1854341120)

a[25](1)         b[25] (1)      c[25] (1)

a[26](1)         b[26] (1)      c[26] (324)

a[27](1)         b[27] (1)      c[27] (0)

a[28](1)         b[28] (1)      c[28] (257)

a[29](1)         b[29] (1)      c[29] (0)

a[30](1)         b[30] (1)      c[30] (0)

a[31](1)         b[31] (1)      c[31] (0)

a[32](1)         b[32] (1)      c[32] (327)

a[33](1)         b[33] (1)      c[33] (0)

a[34](1)         b[34] (1)      c[34] (-1721639057)

a[35](1)         b[35] (1)      c[35] (32767)

a[36](1)         b[36] (1)      c[36] (-1855706272)

a[37](1)         b[37] (1)      c[37] (433)

a[38](1)         b[38] (1)      c[38] (28966944)

a[39](1)         b[39] (1)      c[39] (0)

a[40](1)         b[40] (1)      c[40] (-1854341120)

a[41](1)         b[41] (1)      c[41] (1)

a[42](1)         b[42] (1)      c[42] (-1855706240)

a[43](1)         b[43] (1)      c[43] (433)

a[44](1)         b[44] (1)      c[44] (327)

a[45](1)         b[45] (1)      c[45] (0)

a[46](1)         b[46] (1)      c[46] (0)

a[47](1)         b[47] (1)      c[47] (0)

a[48](1)         b[48] (1)      c[48] (322)

a[49](1)         b[49] (1)      c[49] (0)

a[50](1)         b[50] (1)      c[50] (-1157627462)

a[51](1)         b[51] (1)      c[51] (0)

a[52](1)         b[52] (1)      c[52] (0)

a[53](1)         b[53] (1)      c[53] (0)

a[54](1)         b[54] (1)      c[54] (324)

a[55](1)         b[55] (1)      c[55] (0)

a[56](1)         b[56] (1)      c[56] (-1855706560)

a[57](1)         b[57] (1)      c[57] (433)

a[58](1)         b[58] (1)      c[58] (-1855706288)

a[59](1)         b[59] (1)      c[59] (433)

a[60](1)         b[60] (1)      c[60] (0)

a[61](1)         b[61] (1)      c[61] (0)

a[62](1)         b[62] (1)      c[62] (-1157627462)

a[63](1)         b[63] (1)      c[63] (32767)

a[64](1)         b[64] (1)      c[64] (324)

a[65](1)         b[65] (1)      c[65] (0)

a[66](1)         b[66] (1)      c[66] (324)

a[67](1)         b[67] (1)      c[67] (0)

a[68](1)         b[68] (1)      c[68] (199)

a[69](1)         b[69] (1)      c[69] (0)

a[70](1)         b[70] (1)      c[70] (327)

a[71](1)         b[71] (1)      c[71] (0)

a[72](1)         b[72] (1)      c[72] (-1855706560)

a[73](1)         b[73] (1)      c[73] (433)

a[74](1)         b[74] (1)      c[74] (-1157627462)

a[75](1)         b[75] (1)      c[75] (0)

a[76](1)         b[76] (1)      c[76] (327)

a[77](1)         b[77] (1)      c[77] (0)

a[78](1)         b[78] (1)      c[78] (-1157627462)

a[79](1)         b[79] (1)      c[79] (433)

a[80](1)         b[80] (1)      c[80] (0)

a[81](1)         b[81] (1)      c[81] (0)

a[82](1)         b[82] (1)      c[82] (327)

a[83](1)         b[83] (1)      c[83] (0)

a[84](1)         b[84] (1)      c[84] (32)

a[85](1)         b[85] (1)      c[85] (0)

a[86](1)         b[86] (1)      c[86] (1157628228)

a[87](1)         b[87] (1)      c[87] (0)

a[88](1)         b[88] (1)      c[88] (4)

a[89](1)         b[89] (1)      c[89] (0)

a[90](1)         b[90] (1)      c[90] (-1157627462)

a[91](1)         b[91] (1)      c[91] (433)

a[92](1)         b[92] (1)      c[92] (0)

a[93](1)         b[93] (1)      c[93] (0)

a[94](1)         b[94] (1)      c[94] (-1157627462)

a[95](1)         b[95] (1)      c[95] (433)

a[96](1)         b[96] (1)      c[96] (-1855706224)

a[97](1)         b[97] (1)      c[97] (433)

a[98](1)         b[98] (1)      c[98] (-1157627462)

a[99](1)         b[99] (1)      c[99] (0)

a[100](1)        b[100] (1)     c[100] (0)

a[101](1)        b[101] (1)     c[101] (0)

a[102](1)        b[102] (1)     c[102] (-1721672799)

a[103](1)        b[103] (1)     c[103] (32767)

Result:
a[0](1) + b[0] (1) ==> c[0] (1)

a[1](1) + b[1] (1) ==> c[1] (1)

a[2](1) + b[2] (1) ==> c[2] (1)

a[3](1) + b[3] (1) ==> c[3] (1)

a[4](1) + b[4] (1) ==> c[4] (1)

a[5](1) + b[5] (1) ==> c[5] (1)

a[6](1) + b[6] (1) ==> c[6] (1)

a[7](1) + b[7] (1) ==> c[7] (1)

a[8](1) + b[8] (1) ==> c[8] (1)

a[9](1) + b[9] (1) ==> c[9] (1)

a[10](1) + b[10] (1) ==> c[10] (1)

a[11](1) + b[11] (1) ==> c[11] (1)

a[12](1) + b[12] (1) ==> c[12] (1)

a[13](1) + b[13] (1) ==> c[13] (1)

a[14](1) + b[14] (1) ==> c[14] (1)

a[15](1) + b[15] (1) ==> c[15] (1)

a[16](1) + b[16] (1) ==> c[16] (1)

a[17](1) + b[17] (1) ==> c[17] (1)

a[18](1) + b[18] (1) ==> c[18] (1)

a[19](1) + b[19] (1) ==> c[19] (1)

a[20](1) + b[20] (1) ==> c[20] (1)

a[21](1) + b[21] (1) ==> c[21] (1)

a[22](1) + b[22] (1) ==> c[22] (1)

a[23](1) + b[23] (1) ==> c[23] (1)

a[24](1) + b[24] (1) ==> c[24] (1)

a[25](1) + b[25] (1) ==> c[25] (1)

a[26](1) + b[26] (1) ==> c[26] (1)

a[27](1) + b[27] (1) ==> c[27] (1)

a[28](1) + b[28] (1) ==> c[28] (1)

a[29](1) + b[29] (1) ==> c[29] (1)

a[30](1) + b[30] (1) ==> c[30] (1)

a[31](1) + b[31] (1) ==> c[31] (1)

a[32](1) + b[32] (1) ==> c[32] (1)

a[33](1) + b[33] (1) ==> c[33] (1)

a[34](1) + b[34] (1) ==> c[34] (1)

a[35](1) + b[35] (1) ==> c[35] (1)

a[36](1) + b[36] (1) ==> c[36] (1)

a[37](1) + b[37] (1) ==> c[37] (1)

a[38](1) + b[38] (1) ==> c[38] (1)

a[39](1) + b[39] (1) ==> c[39] (1)

a[40](1) + b[40] (1) ==> c[40] (1)

a[41](1) + b[41] (1) ==> c[41] (1)

a[42](1) + b[42] (1) ==> c[42] (1)

a[43](1) + b[43] (1) ==> c[43] (1)

a[44](1) + b[44] (1) ==> c[44] (1)

a[45](1) + b[45] (1) ==> c[45] (1)

a[46](1) + b[46] (1) ==> c[46] (1)

a[47](1) + b[47] (1) ==> c[47] (1)

a[48](1) + b[48] (1) ==> c[48] (1)

a[49](1) + b[49] (1) ==> c[49] (1)

a[50](1) + b[50] (1) ==> c[50] (1)

a[51](1) + b[51] (1) ==> c[51] (1)

a[52](1) + b[52] (1) ==> c[52] (1)

a[53](1) + b[53] (1) ==> c[53] (1)

a[54](1) + b[54] (1) ==> c[54] (1)

a[55](1) + b[55] (1) ==> c[55] (1)

a[56](1) + b[56] (1) ==> c[56] (1)

a[57](1) + b[57] (1) ==> c[57] (1)

a[58](1) + b[58] (1) ==> c[58] (1)

a[59](1) + b[59] (1) ==> c[59] (1)

a[60](1) + b[60] (1) ==> c[60] (1)

a[61](1) + b[61] (1) ==> c[61] (1)

a[62](1) + b[62] (1) ==> c[62] (1)

a[63](1) + b[63] (1) ==> c[63] (1)

a[64](1) + b[64] (1) ==> c[64] (1)

a[65](1) + b[65] (1) ==> c[65] (1)

a[66](1) + b[66] (1) ==> c[66] (1)

a[67](1) + b[67] (1) ==> c[67] (1)

a[68](1) + b[68] (1) ==> c[68] (1)

a[69](1) + b[69] (1) ==> c[69] (1)

a[70](1) + b[70] (1) ==> c[70] (1)

a[71](1) + b[71] (1) ==> c[71] (1)

a[72](1) + b[72] (1) ==> c[72] (1)

a[73](1) + b[73] (1) ==> c[73] (1)

a[74](1) + b[74] (1) ==> c[74] (1)

a[75](1) + b[75] (1) ==> c[75] (1)

a[76](1) + b[76] (1) ==> c[76] (1)

a[77](1) + b[77] (1) ==> c[77] (1)

a[78](1) + b[78] (1) ==> c[78] (1)

a[79](1) + b[79] (1) ==> c[79] (1)

a[80](1) + b[80] (1) ==> c[80] (1)

a[81](1) + b[81] (1) ==> c[81] (1)

a[82](1) + b[82] (1) ==> c[82] (1)

a[83](1) + b[83] (1) ==> c[83] (1)

a[84](1) + b[84] (1) ==> c[84] (1)

a[85](1) + b[85] (1) ==> c[85] (1)

a[86](1) + b[86] (1) ==> c[86] (1)

a[87](1) + b[87] (1) ==> c[87] (1)

a[88](1) + b[88] (1) ==> c[88] (1)

a[89](1) + b[89] (1) ==> c[89] (1)

a[90](1) + b[90] (1) ==> c[90] (1)

a[91](1) + b[91] (1) ==> c[91] (1)

a[92](1) + b[92] (1) ==> c[92] (1)

a[93](1) + b[93] (1) ==> c[93] (1)

a[94](1) + b[94] (1) ==> c[94] (1)

a[95](1) + b[95] (1) ==> c[95] (1)

a[96](1) + b[96] (1) ==> c[96] (1)

a[97](1) + b[97] (1) ==> c[97] (1)

a[98](1) + b[98] (1) ==> c[98] (1)

a[99](1) + b[99] (1) ==> c[99] (1)

a[100](1) + b[100] (1) ==> c[100] (1)

a[101](1) + b[101] (1) ==> c[101] (1)

a[102](1) + b[102] (1) ==> c[102] (1)

a[103](1) + b[103] (1) ==> c[103] (1)

SUM = 104
*/